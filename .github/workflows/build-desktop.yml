name: Build Desktop App

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache web node_modules
      uses: actions/cache@v3
      with:
        path: web/node_modules
        key: ${{ runner.os }}-web-node-${{ hashFiles('web/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-web-node-
          
    - name: Install web dependencies
      working-directory: ./web
      run: npm install
      
    - name: Build web app
      working-directory: ./web
      run: npm run build
      
    - name: Copy web build to desktop (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp -r web/dist desktop/
        
    - name: Copy web build to desktop (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        robocopy web\dist desktop\dist /E /NFL /NDL /NJH /NJS /nc /ns /np
        if %errorlevel% leq 1 exit /b 0
      
    - name: Cache desktop node_modules
      uses: actions/cache@v3
      with:
        path: desktop/node_modules
        key: ${{ runner.os }}-desktop-node-${{ hashFiles('desktop/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-desktop-node-
          
    - name: Install desktop dependencies
      working-directory: ./desktop
      run: npm install
      
    - name: Generate app icons (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ./desktop
      run: |
        npm install -g png2icons || echo "Failed to install png2icons"
        chmod +x generate-icons.sh
        ./generate-icons.sh || echo "Icon generation failed, using fallback icons"
        
    - name: Generate app icons (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./desktop
      run: |
        npm install -g png2icons
        ./generate-icons.bat
      continue-on-error: true
      
    - name: Build desktop app (macOS)
      if: matrix.os == 'macos-latest'
      working-directory: ./desktop
      run: npm run build:electron -- --mac --publish=never
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Build desktop app (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./desktop
      run: npm run build:electron -- --win --publish=never
      
    - name: Build desktop app (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./desktop
      run: npm run build:electron -- --linux --publish=never
      
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: exif-frame-macos
        path: |
          desktop/release/*.dmg
          desktop/release/*.zip
        retention-days: 30
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: exif-frame-windows
        path: |
          desktop/release/*.exe
          desktop/release/*.zip
          desktop/release/*portable*.exe
        retention-days: 30
        
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: exif-frame-linux
        path: |
          desktop/release/*.AppImage
          desktop/release/*.deb
          desktop/release/*.rpm
          desktop/release/*.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Display structure of downloaded files
      run: ls -la ./artifacts
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/exif-frame-macos/*
          ./artifacts/exif-frame-windows/*
          ./artifacts/exif-frame-linux/*
        body: |
          ## Desktop App Release
          
          üì∏ ‚Üí üñºÔ∏è with EXIF metadata
          
          ### Downloads by Platform & Architecture
          
          #### **macOS** üçé
          - **Intel (x64)**: `.dmg` installer or `.zip` portable
          - **Apple Silicon (ARM64)**: `.dmg` installer or `.zip` portable
          
          #### **Windows** ü™ü
          - **x64**: `.exe` installer or `-portable.exe` (no installation required)
          - **x86 (32-bit)**: `.exe` installer or `-portable.exe` (no installation required)
          - **ARM64**: `.exe` installer or `-portable.exe` (no installation required)
          
          #### **Linux** üêß
          - **x64 & ARM64**: 
            - `.AppImage` - Universal portable executable (all distros)
            - `.deb` - Debian/Ubuntu packages
            - `.rpm` - RHEL/Fedora/SUSE packages
            - `.tar.gz` - Portable archive
          
          ### ‚ú® Features
          - **Portable executables**: No installation required (Windows portable, Linux AppImage/tar.gz)
          - **Universal compatibility**: All major CPU architectures (Intel, AMD, Apple Silicon, ARM64)
          - **All Linux distros**: Debian, Ubuntu, RHEL, Fedora, SUSE, Arch, and more
          - **Native performance**: Platform-optimized builds
          - **File system integration**: Drag & drop, native file dialogs
          - **Keyboard shortcuts**: Full desktop app experience
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
